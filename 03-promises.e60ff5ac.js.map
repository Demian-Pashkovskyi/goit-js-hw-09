{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAGA,IAAMC,EAAOC,SAASC,cAAc,SAcpC,SAASC,EAAcC,EAAUC,GAChC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC7BC,YAAW,WACYC,KAAKC,SAAW,GAErCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,YAElBA,MAILL,EAAKY,iBAAiB,UAAU,SAACC,GAChCA,EAAMC,iBAEN,IAAMC,EAAO,IAAIC,SAAShB,GACpBiB,EAAQC,SAASH,EAAKI,IAAI,UAC1BC,EAAOF,SAASH,EAAKI,IAAI,SACzBE,EAASH,SAASH,EAAKI,IAAI,WACjCG,QAAQC,IAAIN,GACZK,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAEZ,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAQG,IAC3BrB,EAAcqB,EAAGP,EAAQG,EAAOI,GAC/BC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,MAAK,CAAE0B,QAAS,SAEtFC,OAAM,SAAAN,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACnBsB,EAAA7B,GAAS8B,OAAOK,QAAQ,sBAAqCH,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,MAAK,CAAE0B,QAAS,Y","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n// const delay = document.querySelector('[name=\"delay\"]');\n// const step = document.querySelector('[name=\"step\"]');\n// const amount = document.querySelector('[name=\"amount\"]');\n// const submitBtn = document.querySelector('button[type=\"submit\"]');\n\n// createPromise(position, delay)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nfunction createPromise(position, delay) {\n\treturn new Promise ((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tconst shouldResolve = Math.random() > 0.3;\n\t\t\tif (shouldResolve) {\n\t\t\t\tresolve({ position, delay });\n\t\t\t}\n\t\t\t\telse {\n\t\t\t\treject({ position, delay });\n\t\t\t  }\n\t\t}, delay);\n\t});\n};\n\nform.addEventListener('submit', (event) => {\n\tevent.preventDefault();\n\n\tconst data = new FormData(form);\n\tconst delay = parseInt(data.get('delay'));\n\tconst step = parseInt(data.get('step'));\n\tconst amount = parseInt(data.get('amount'));\n\tconsole.log(delay);\n\tconsole.log(step);\n\tconsole.log(amount);\n\n\tfor (let i = 0; i < amount; i++) {\n\t\tcreatePromise(i, delay + step * i)\n\t\t.then(({ position, delay }) => {\n\t\t\tNotiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { timeout: 5000 });\n\t\t})\n\t\t.catch(({ position, delay }) => {\n\t\t\tNotiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { timeout: 5000 });\n\t\t});\n\t}\n});\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","data","FormData","delay1","parseInt","get","step","amount","console","log","i","then","param","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure"],"version":3,"file":"03-promises.e60ff5ac.js.map"}